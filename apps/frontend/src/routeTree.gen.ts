/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as ConductorIndexImport } from './routes/conductor/index'
import { Route as DashboardVehiculosImport } from './routes/dashboard/vehiculos'
import { Route as DashboardUsuariosImport } from './routes/dashboard/usuarios'
import { Route as DashboardAsignacionesImport } from './routes/dashboard/asignaciones'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => rootRoute,
} as any)

const ConductorIndexRoute = ConductorIndexImport.update({
  id: '/conductor/',
  path: '/conductor/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardVehiculosRoute = DashboardVehiculosImport.update({
  id: '/dashboard/vehiculos',
  path: '/dashboard/vehiculos',
  getParentRoute: () => rootRoute,
} as any)

const DashboardUsuariosRoute = DashboardUsuariosImport.update({
  id: '/dashboard/usuarios',
  path: '/dashboard/usuarios',
  getParentRoute: () => rootRoute,
} as any)

const DashboardAsignacionesRoute = DashboardAsignacionesImport.update({
  id: '/dashboard/asignaciones',
  path: '/dashboard/asignaciones',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/asignaciones': {
      id: '/dashboard/asignaciones'
      path: '/dashboard/asignaciones'
      fullPath: '/dashboard/asignaciones'
      preLoaderRoute: typeof DashboardAsignacionesImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/usuarios': {
      id: '/dashboard/usuarios'
      path: '/dashboard/usuarios'
      fullPath: '/dashboard/usuarios'
      preLoaderRoute: typeof DashboardUsuariosImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/vehiculos': {
      id: '/dashboard/vehiculos'
      path: '/dashboard/vehiculos'
      fullPath: '/dashboard/vehiculos'
      preLoaderRoute: typeof DashboardVehiculosImport
      parentRoute: typeof rootRoute
    }
    '/conductor/': {
      id: '/conductor/'
      path: '/conductor'
      fullPath: '/conductor'
      preLoaderRoute: typeof ConductorIndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard/asignaciones': typeof DashboardAsignacionesRoute
  '/dashboard/usuarios': typeof DashboardUsuariosRoute
  '/dashboard/vehiculos': typeof DashboardVehiculosRoute
  '/conductor': typeof ConductorIndexRoute
  '/dashboard': typeof DashboardIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard/asignaciones': typeof DashboardAsignacionesRoute
  '/dashboard/usuarios': typeof DashboardUsuariosRoute
  '/dashboard/vehiculos': typeof DashboardVehiculosRoute
  '/conductor': typeof ConductorIndexRoute
  '/dashboard': typeof DashboardIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboard/asignaciones': typeof DashboardAsignacionesRoute
  '/dashboard/usuarios': typeof DashboardUsuariosRoute
  '/dashboard/vehiculos': typeof DashboardVehiculosRoute
  '/conductor/': typeof ConductorIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard/asignaciones'
    | '/dashboard/usuarios'
    | '/dashboard/vehiculos'
    | '/conductor'
    | '/dashboard'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard/asignaciones'
    | '/dashboard/usuarios'
    | '/dashboard/vehiculos'
    | '/conductor'
    | '/dashboard'
  id:
    | '__root__'
    | '/'
    | '/dashboard/asignaciones'
    | '/dashboard/usuarios'
    | '/dashboard/vehiculos'
    | '/conductor/'
    | '/dashboard/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardAsignacionesRoute: typeof DashboardAsignacionesRoute
  DashboardUsuariosRoute: typeof DashboardUsuariosRoute
  DashboardVehiculosRoute: typeof DashboardVehiculosRoute
  ConductorIndexRoute: typeof ConductorIndexRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardAsignacionesRoute: DashboardAsignacionesRoute,
  DashboardUsuariosRoute: DashboardUsuariosRoute,
  DashboardVehiculosRoute: DashboardVehiculosRoute,
  ConductorIndexRoute: ConductorIndexRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard/asignaciones",
        "/dashboard/usuarios",
        "/dashboard/vehiculos",
        "/conductor/",
        "/dashboard/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard/asignaciones": {
      "filePath": "dashboard/asignaciones.tsx"
    },
    "/dashboard/usuarios": {
      "filePath": "dashboard/usuarios.tsx"
    },
    "/dashboard/vehiculos": {
      "filePath": "dashboard/vehiculos.tsx"
    },
    "/conductor/": {
      "filePath": "conductor/index.tsx"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
