/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteRouteImport } from './routes/dashboard/route'
import { Route as ConductorRouteRouteImport } from './routes/conductor/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as ConductorIndexRouteImport } from './routes/conductor/index'
import { Route as DashboardVehiculosRouteImport } from './routes/dashboard/vehiculos'
import { Route as DashboardUsuariosRouteImport } from './routes/dashboard/usuarios'
import { Route as DashboardAsignacionesRouteImport } from './routes/dashboard/asignaciones'

const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const ConductorRouteRoute = ConductorRouteRouteImport.update({
  id: '/conductor',
  path: '/conductor',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const ConductorIndexRoute = ConductorIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ConductorRouteRoute,
} as any)
const DashboardVehiculosRoute = DashboardVehiculosRouteImport.update({
  id: '/vehiculos',
  path: '/vehiculos',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardUsuariosRoute = DashboardUsuariosRouteImport.update({
  id: '/usuarios',
  path: '/usuarios',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardAsignacionesRoute = DashboardAsignacionesRouteImport.update({
  id: '/asignaciones',
  path: '/asignaciones',
  getParentRoute: () => DashboardRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/conductor': typeof ConductorRouteRouteWithChildren
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/dashboard/asignaciones': typeof DashboardAsignacionesRoute
  '/dashboard/usuarios': typeof DashboardUsuariosRoute
  '/dashboard/vehiculos': typeof DashboardVehiculosRoute
  '/conductor/': typeof ConductorIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard/asignaciones': typeof DashboardAsignacionesRoute
  '/dashboard/usuarios': typeof DashboardUsuariosRoute
  '/dashboard/vehiculos': typeof DashboardVehiculosRoute
  '/conductor': typeof ConductorIndexRoute
  '/dashboard': typeof DashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/conductor': typeof ConductorRouteRouteWithChildren
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/dashboard/asignaciones': typeof DashboardAsignacionesRoute
  '/dashboard/usuarios': typeof DashboardUsuariosRoute
  '/dashboard/vehiculos': typeof DashboardVehiculosRoute
  '/conductor/': typeof ConductorIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/conductor'
    | '/dashboard'
    | '/dashboard/asignaciones'
    | '/dashboard/usuarios'
    | '/dashboard/vehiculos'
    | '/conductor/'
    | '/dashboard/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard/asignaciones'
    | '/dashboard/usuarios'
    | '/dashboard/vehiculos'
    | '/conductor'
    | '/dashboard'
  id:
    | '__root__'
    | '/'
    | '/conductor'
    | '/dashboard'
    | '/dashboard/asignaciones'
    | '/dashboard/usuarios'
    | '/dashboard/vehiculos'
    | '/conductor/'
    | '/dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ConductorRouteRoute: typeof ConductorRouteRouteWithChildren
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/conductor': {
      id: '/conductor'
      path: '/conductor'
      fullPath: '/conductor'
      preLoaderRoute: typeof ConductorRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/conductor/': {
      id: '/conductor/'
      path: '/'
      fullPath: '/conductor/'
      preLoaderRoute: typeof ConductorIndexRouteImport
      parentRoute: typeof ConductorRouteRoute
    }
    '/dashboard/vehiculos': {
      id: '/dashboard/vehiculos'
      path: '/vehiculos'
      fullPath: '/dashboard/vehiculos'
      preLoaderRoute: typeof DashboardVehiculosRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/usuarios': {
      id: '/dashboard/usuarios'
      path: '/usuarios'
      fullPath: '/dashboard/usuarios'
      preLoaderRoute: typeof DashboardUsuariosRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/asignaciones': {
      id: '/dashboard/asignaciones'
      path: '/asignaciones'
      fullPath: '/dashboard/asignaciones'
      preLoaderRoute: typeof DashboardAsignacionesRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
  }
}

interface ConductorRouteRouteChildren {
  ConductorIndexRoute: typeof ConductorIndexRoute
}

const ConductorRouteRouteChildren: ConductorRouteRouteChildren = {
  ConductorIndexRoute: ConductorIndexRoute,
}

const ConductorRouteRouteWithChildren = ConductorRouteRoute._addFileChildren(
  ConductorRouteRouteChildren,
)

interface DashboardRouteRouteChildren {
  DashboardAsignacionesRoute: typeof DashboardAsignacionesRoute
  DashboardUsuariosRoute: typeof DashboardUsuariosRoute
  DashboardVehiculosRoute: typeof DashboardVehiculosRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardAsignacionesRoute: DashboardAsignacionesRoute,
  DashboardUsuariosRoute: DashboardUsuariosRoute,
  DashboardVehiculosRoute: DashboardVehiculosRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ConductorRouteRoute: ConductorRouteRouteWithChildren,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
